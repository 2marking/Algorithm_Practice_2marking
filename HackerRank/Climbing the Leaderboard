import java.io.*
import java.math.*
import java.security.*
import java.text.*
import java.util.*
import java.util.concurrent.*
import java.util.function.*
import java.util.regex.*
import java.util.stream.*
import kotlin.collections.*
import kotlin.comparisons.*
import kotlin.io.*
import kotlin.jvm.*
import kotlin.jvm.functions.*
import kotlin.jvm.internal.*
import kotlin.ranges.*
import kotlin.sequences.*
import kotlin.text.*

// Complete the climbingLeaderboard function below.
fun climbingLeaderboard(scores: Array<Int>, alice: Array<Int>): ArrayList<Int> {
    var resultAliceArray: ArrayList<Int> = arrayListOf()
    var hash2:HashMap<Int, Int> = hashMapOf()
    var rankCount = 0

    for (i in 0..alice.size-1){
        val arangeIndex = devideAndConqure(scores, alice[i], 0, scores.size-1)
        for (j in arangeIndex downTo 0){
            if (scores[j]>alice[i]) {
                val distinctScores = scores.slice(0..j).distinct().size 
                rankCount = distinctScores
                break
            }
            if (!hash2.containsKey(scores[j]) && scores[j] > alice[i]){
                rankCount=j
                hash2.set(scores[j], scores[j])
            }
        }
        resultAliceArray.add(rankCount+1)
        hash2.clear()
        rankCount=0
    }
    return resultAliceArray
}

fun devideAndConqure(arr:Array<Int>, score:Int, left:Int, right:Int): Int{
    if (score>arr[left]) return 0
    if (score>arr[right]) {
        devideAndConqure(arr, score, 0, (left+right)/2)    
    }
    return right
}

fun main(args: Array<String>) {
    val scan = Scanner(System.`in`)

    val scoresCount = scan.nextLine().trim().toInt()

    val scores = scan.nextLine().split(" ").map{ it.trim().toInt() }.toTypedArray()

    val aliceCount = scan.nextLine().trim().toInt()

    val alice = scan.nextLine().split(" ").map{ it.trim().toInt() }.toTypedArray()

    val result = climbingLeaderboard(scores, alice)

    println(result.joinToString("\n"))
}
